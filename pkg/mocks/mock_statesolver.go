// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NiR-/zbuild/pkg/statesolver (interfaces: StateSolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	context "context"
	builddef "github.com/NiR-/zbuild/pkg/builddef"
	statesolver "github.com/NiR-/zbuild/pkg/statesolver"
	gomock "github.com/golang/mock/gomock"
	llb "github.com/moby/buildkit/client/llb"
	reflect "reflect"
)

// MockStateSolver is a mock of StateSolver interface
type MockStateSolver struct {
	ctrl     *gomock.Controller
	recorder *MockStateSolverMockRecorder
}

// MockStateSolverMockRecorder is the mock recorder for MockStateSolver
type MockStateSolverMockRecorder struct {
	mock *MockStateSolver
}

// NewMockStateSolver creates a new mock instance
func NewMockStateSolver(ctrl *gomock.Controller) *MockStateSolver {
	mock := &MockStateSolver{ctrl: ctrl}
	mock.recorder = &MockStateSolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateSolver) EXPECT() *MockStateSolverMockRecorder {
	return m.recorder
}

// ExecImage mocks base method
func (m *MockStateSolver) ExecImage(arg0 context.Context, arg1 string, arg2 []string) (*bytes.Buffer, error) {
	ret := m.ctrl.Call(m, "ExecImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecImage indicates an expected call of ExecImage
func (mr *MockStateSolverMockRecorder) ExecImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecImage", reflect.TypeOf((*MockStateSolver)(nil).ExecImage), arg0, arg1, arg2)
}

// FromContext mocks base method
func (m *MockStateSolver) FromContext(arg0 *builddef.Context, arg1 ...llb.LocalOption) statesolver.ReadFileOpt {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FromContext", varargs...)
	ret0, _ := ret[0].(statesolver.ReadFileOpt)
	return ret0
}

// FromContext indicates an expected call of FromContext
func (mr *MockStateSolverMockRecorder) FromContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromContext", reflect.TypeOf((*MockStateSolver)(nil).FromContext), varargs...)
}

// FromImage mocks base method
func (m *MockStateSolver) FromImage(arg0 string) statesolver.ReadFileOpt {
	ret := m.ctrl.Call(m, "FromImage", arg0)
	ret0, _ := ret[0].(statesolver.ReadFileOpt)
	return ret0
}

// FromImage indicates an expected call of FromImage
func (mr *MockStateSolverMockRecorder) FromImage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromImage", reflect.TypeOf((*MockStateSolver)(nil).FromImage), arg0)
}

// ReadFile mocks base method
func (m *MockStateSolver) ReadFile(arg0 context.Context, arg1 string, arg2 statesolver.ReadFileOpt) ([]byte, error) {
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockStateSolverMockRecorder) ReadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockStateSolver)(nil).ReadFile), arg0, arg1, arg2)
}

// ResolveImageRef mocks base method
func (m *MockStateSolver) ResolveImageRef(arg0 context.Context, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "ResolveImageRef", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveImageRef indicates an expected call of ResolveImageRef
func (mr *MockStateSolverMockRecorder) ResolveImageRef(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveImageRef", reflect.TypeOf((*MockStateSolver)(nil).ResolveImageRef), arg0, arg1)
}
