#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
[[ "${TRACE:-}" != "" ]] && set -o xtrace

unset COMPOSE_FILE
unset COMPOSE_PROJECT_NAME

config=$(docker-compose config | yq .)
services=$(echo "${config}" | jq -r '.services | keys[]')
basedir=$(pwd)

for service_name in ${services}; do
	service=$(echo "${config}" | jq ".services[\"${service_name}\"]")
    has_build_config=$(echo ${service} | jq -r 'has("build")')

    if [[ "${has_build_config}" != "true" ]]; then
        continue
    fi

	img=$(echo ${service} | jq -r '.image')
	context=$(echo ${service} | jq -r '.build.context // "."')
	dockerfile=$(echo ${service} | jq -r '.build.dockerfile // "Dockerfile"')
	target=$(echo ${service} | jq -r '.build.target // ""')

	echo "##########"
	echo "Building stage ${target} from ${dockerfile} (context: ${context}):"
	echo "##########"

	build_args="-t ${img} -f ${dockerfile}"
	if [[ "${target}" != "" ]]; then
		build_args="${build_args} --target ${target}"
	fi

	if [[ "${CI:-}" != "" ]]; then
		build_args="${build_args} --progress plain"
	fi

	if [[ "${NO_CACHE:-}" != "" ]]; then
		build_args="${build_args} --no-cache"
	fi

	if [[ "${WITH_CACHE_MOUNTS:-}" != "" ]]; then
		cache_dir="${basedir}/.cache/${service_name}"
		if [ -d "${cache_dir}" ]; then
			build_args="${build_args} --cache-from type=local,src=${cache_dir} --cache-to type=inline"
		else
			build_args="${build_args} --cache-to type=local,dest=${cache_dir}"
		fi
	fi

	cd ${context}
	docker buildx build ${build_args} .
done
