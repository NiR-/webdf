// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NiR-/zbuild/pkg/statesolver (interfaces: StateSolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStateSolver is a mock of StateSolver interface
type MockStateSolver struct {
	ctrl     *gomock.Controller
	recorder *MockStateSolverMockRecorder
}

// MockStateSolverMockRecorder is the mock recorder for MockStateSolver
type MockStateSolverMockRecorder struct {
	mock *MockStateSolver
}

// NewMockStateSolver creates a new mock instance
func NewMockStateSolver(ctrl *gomock.Controller) *MockStateSolver {
	mock := &MockStateSolver{ctrl: ctrl}
	mock.recorder = &MockStateSolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateSolver) EXPECT() *MockStateSolverMockRecorder {
	return m.recorder
}

// FetchFile mocks base method
func (m *MockStateSolver) FetchFile(arg0 context.Context, arg1, arg2 string) ([]byte, error) {
	ret := m.ctrl.Call(m, "FetchFile", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFile indicates an expected call of FetchFile
func (mr *MockStateSolverMockRecorder) FetchFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFile", reflect.TypeOf((*MockStateSolver)(nil).FetchFile), arg0, arg1, arg2)
}
